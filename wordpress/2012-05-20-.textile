---
layout: post
title: Objects on Rails
---

<p style="padding-left: 30px"><img class="alignright" src="http://objectsonrails.com/images/xcover-800x600.jpg.pagespeed.ic.Yq5CqHzpNe.jpg" alt="" width="300" height="480" />This is the latest book by <a href="http://devblog.avdi.org/">Avdi Grimm</a>. Its available <a href="http://objectsonrails.com/#sec-1">free online here</a>. It talks about solutions to problems that are hard to spot in a small sized code base but are painfully obvious in large rails projects. The solutions described in the book are slightly more verbose in some cases but its worth the trouble because it makes the code much easier to maintain.


<p style="padding-left: 30px">The Rails projects that I have worked on usually start out as small projects. The solutions described in the book might look like over engineering at this stage. But as the system begins to grow these problems actually starts to look like bigger maintenance issues


<p style="padding-left: 30px">This books describes lot of interesting patterns to solve these problems. Some of these issues are



<ul style="padding-left: 30px">
	<li>Views with logic which are difficult to reuse in other views</li>
	<li>Business logic getting mixed with database persistence in such a way that it is difficult to separate them</li>
	<li>Unit tests which require a long chain of objects as a fixtures because the object being tested depends on them</li>
</ul>
<h2 style="padding-left: 30px">*Decoupling business logic from data persistence *


<p style="padding-left: 30px">This is again not usually a problem for relatively small code bases as the size increases it becomes difficult to understand if you are just trying to save some thing to the database or if you trying to do a more complex business domain operation. One such example in this book is where it suggests to use a publish_post method instead of simple call to save. Initially save and publish_post means the same thing but as soon you have more states for a blog post [published, draft etc] it becomes difficult to tell what a line of post.save in the code will do. In additions to this it also shows [surprisingly] how its possible to build a blogging application almost entirely without using active record or a database.



<h2 style="padding-left: 30px">Exhibit/Presenter patterns for thinner views


<p style="padding-left: 30px">At times we need to format the model attributes before we can display them in the view. This logic usually ends up in the helpers and these  methods need to be called in the view. However it feels much natural to just ask the object to do the formatting itself. But you can't  put them in the model because it is not supposed to have any thing other than business logic. The books shows a solution to this problem using Exhibitor pattern. This is basically achieved by decorating the models with additional functionality such as formatting.



<h2 style="padding-left: 30px">Isolated Tests


<p style="padding-left: 30px">It is very interesting how the design of the blog application is driven using unit tests. The design decisions which was made for making the code easier to test actually make the overall design much more decoupled. The additional advantage of this is faster tests. A lot of the unit tests don't touch the database or the rails stack.

