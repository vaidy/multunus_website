<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: All Posts | Multunus]]></title>
  <link href="http://www.multunus.com/blog/categories/all-posts/atom.xml" rel="self"/>
  <link href="http://www.multunus.com/"/>
  <updated>2013-05-04T20:28:58+05:30</updated>
  <id>http://www.multunus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment of Octopress Website with Prose.io and Jenkins]]></title>
    <link href="http://www.multunus.com/2013/05/proseio_jenkins_heroku/"/>
    <updated>2013-05-04T18:33:00+05:30</updated>
    <id>http://www.multunus.com/2013/05/proseio_jenkins_heroku</id>
    <content type="html"><![CDATA[<p>As mentioned <a href="http://www.multunus.com/2012/10/our-experience-with-jekyll-and-octopress/">in this blog post</a>, out website multunus.com is hosted with Octopress. And as mentioned there, we were looking for a simple solution for Live Editing and Deployment of the website. This post is about how to edit Website with Prose.io and deploy it using Jenkins to heroku.</p>

<p>With <a href="http://prose.io/about.html">Prose.io</a>, you can edit any Github files, but you need to run <code>rake generate</code> command for generating the HTML files and then need to deploy them. So you will need a development setup to deploy, even if the editing can be done online.</p>

<p>The solution is simple i.e. use <a href="http://jenkins-ci.org/">Jenkins</a> or any <a href="http://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration</a> server for deployment.</p>

<p>So the steps are as follows:</p>

<ul>
<li>Add the following in <code>_config.yml</code>:</li>
</ul>


<p>```</p>

<h1>prose.io settings</h1>

<p>prose:
  rooturl: "source"
  metadata:</p>

<pre><code>"source/_posts": |
    layout: post
    title: "Change Title"
    date: 2013-04-11 02:33
    comments: true
    author:
      - author
    categories:
      - All Posts
</code></pre>

<p>````</p>

<ul>
<li>Setup Prose.io - just login with your Github Handle</li>
<li>Create a script with as follows:</li>
</ul>


<p>```
bundle install
bundle exec rake generate
git add public/
git commit -m "Deploying Generated files"</p>

<p>```
* Install the Heroku gem and setup the git remote and keys for deployment as mentioned <a href="https://devcenter.heroku.com/articles/git">here</a></p>

<ul>
<li>Setup Git Publisher to push the generated files to heroku as shown below.</li>
</ul>


<p><img src="https://s3.amazonaws.com/multunus-images/Git+Publisher.png" alt="Git Publisher" /></p>

<p>Thats it. You are done. Just "Build" of a button, the changes gets deployed. With this setup anyone who has access to the Github Repo can make changes and deploy without any setup.</p>

<p>This post is written using Prose.io and published through Jenkins.</p>

<p>Yes, the setup was not as easy I had written above. I got stuck mainly with the following.</p>

<ul>
<li>I got stuck as the command <code>rake generate</code> was watching the file changes. It was not getting stopped for me. The culprit was <code>auto: true</code> in _config.yml file.</li>
<li>If the file extension is .html, Prose.io will not show preview or metadata information. The markdown or md extension would work.</li>
<li>Thought of using Travis.io as mentioned <a href="http://www.harimenon.com/blog/2013/01/27/auto-deploying-to-my-octopress-blog/">here</a> for the deployment. But had issues with setting up git push for Heroku. Didn't continue on that as we've been using Jenkins as our CI server for long.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimating to Timeboxing - Our Journey]]></title>
    <link href="http://www.multunus.com/2013/04/estimating-to-timeboxing-our-journey/"/>
    <updated>2013-04-11T02:33:00+05:30</updated>
    <id>http://www.multunus.com/2013/04/estimating-to-timeboxing-our-journey</id>
    <content type="html"><![CDATA[<p>Estimations are predictions. Unfortunately though, they end up being perceived as <em>commitments</em>. And the team in question starts getting unduly pressured when the estimates go wrong. At Multunus this has happened many times in the past.</p>

<p>Sometime last year we realized there was no point in trying any harder to come up with better estimates - just by relying on our past experience and gut instincts. It was time to look at things from a different perspective. </p>




<p>
We learnt a lot of things from <a href="http://www.jamesshore.com/Agile-Book/">Art of Agile Development [by James Shore]</a>. We found it tremendously useful for learning how to get started with Extreme Programming - and making the “prevention rather than cure” mental shift. This in turn resulted in much less <em>waste</em> - and higher efficiency across the team.
</p>




<p>
But we were still struggling with estimating. We tried the story points and velocity approach suggested by XP. But we were still unable to deliver things at a predictable pace.
</p>


<p>It was time to look beyond XP’s default practices. </p>




<h2>First set of changes</h2>


<br/>


<ul>
    <li>Keep both <a href="http://www.jamesshore.com/Agile-Book/release_planning.html">MMFs and Stories</a> as small as possible. </li>
    <li>Slice down all stories to the same size. This reduces the margin of error that creeps in during story size estimation. </li>
    <li>The velocity, then, is simply the number of stories delivered in an iteration.</li>
</ul>


<p>
The above changes worked well on projects which already had some kind of rhythm. We’d been working with these customer for at least 3 months - so, our knowledge of the system and the customer’s requirements were good. 
</p>


<p>
However, things still fell apart for new projects and customers. The level of uncertainty is obviously much higher in these cases - and the above modified approach was not sufficient for us to remain predictable enough.
</p>


<h2>Second set of changes</h2>


<br/>


<p>
During our search for alternative approaches [see references below], we discovered multiple presentations and blog posts - all suggesting the same thing: Estimating can never be accurate <em>enough</em>. 
</p>


<p>
We watched the <a href="http://www.infoq.com/presentations/Embracing-Uncertainty">Deliberate Discovery video [by Dan North]</a> - and that hit us. We might be more successful if we flipped things around - and <strong>timeboxed</strong> the stories and MMF’s. 
</p>


<p>
Instead of asking the question “How long will it take to build this Feature?”, we instead ask the question “What is the maximum time that should allocate for this feature?”. In addition, we’re also documenting what it is that we’re trying to discover/learn by building that particular feature. 
</p>


<p>
<strong>NOTE:</strong> This is subtly different from the “validated learning” approach in the Lean Startup world - because at this stage, we’re only speaking of engineering related risks.
</p>


<p>
This is useful to overcome <a href="http://en.wikipedia.org/wiki/Parkinson's_law">Parkinson’s Law</a> [“Work expands so as to fill the time available for its completion”]. There’s an additional sense of urgency that prevails on the team. This sense of urgency in turn results in reacting faster when we find ourselves going down “inevitable” rabbit holes. 
</p>


<p>
We’re also noticing a more ready acceptance of the “fail early” mantra - after shifting to the timeboxing mode. 

We’ve tried the timeboxing approach on two different projects - and in both cases, have found remarkably better results. We were close enough to the original estimates that we’d provided - in terms of both cost and time. 
</p>


<h2>Kanban</h2>


<br/>


<p>
As mentioned in my <a href="http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool/">earlier post</a>, we’ve moved to Kanban, so we’re no longer doing fixed weekly iterations. And hence no calculations of velocity either.
</p>


<p>
Instead the focus is on reducing the cycle time for stories - by constantly identifying and eliminating waste in the workflow. 
</p>


<p>
Of course, tracking the original project plan is still necessary - and allows for an additional level of feedback on how well the team is progressing. 
</p>


<h3>References</h3>


<p></br/>
<a href="http://neilkillick.com/2012/04/12/do-not-estimate-software-projects-at-all">http://neilkillick.com/2012/04/12/do-not-estimate-software-projects-at-all/</a></p>

<br/>


<p><a href="http://softwaredevelopmenttoday.blogspot.com.au/2012/01/story-points-considered-harmful-or-why.html">http://softwaredevelopmenttoday.blogspot.com.au/2012/01/story-points-considered-harmful-or-why.html</a></p>

<br/>


<p><a href="http://www.infoq.com/presentations/Want-Better-Estimates-Stop-Estimating">http://www.infoq.com/presentations/Want-Better-Estimates-Stop-Estimating</a></p>

<br/>


<p><a href="http://www.industriallogic.com/blog/stop-using-story-points/">http://www.industriallogic.com/blog/stop-using-story-points/</a>
<a href="http://dannorth.net/2009/07/01/the-perils-of-estimation/">http://dannorth.net/2009/07/01/the-perils-of-estimation/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we chose our Kanban Tool]]></title>
    <link href="http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool/"/>
    <updated>2013-03-09T22:39:00+05:30</updated>
    <id>http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool</id>
    <content type="html"><![CDATA[<p>We've been using <a href="http://www.pivotaltracker.com/">Pivotal Tracker </a>[PT] as our Collaborative Project Management Tool for over 2 years now.</p>

<p>
Recently though, we chose to move toward a Kanban style of workflow. PT is however heavily geared toward an iterative form of development - but we’ve now chosen to eschew iterations altogether. We’ve been doing continuous deployment for a while now, and we found the whole process of estimations and sizing of stories a largely wasteful exercise. 
</p>


<p>
  I am not going to talk about “Why Kanban”, because there are many articles and books which talks about the same. But I am instead going to walk you through the process that we used to evaluate and decide upon the online Kanban tool that we finally ended up shifting to.
</p>


<p>
The different tools we evaluated were:
<ul>
  <li><a href="http://leankit.com/">LeanKit</a></li>
  <li><a href="http://kanbanery.com/">Kanbanery</a></li>
  <li><a href="http://kanbantool.com/">KanbanTool</a></li>
</ul>
</p>


<p>
  If you’ve ever used PT, you already know what an awesome piece of software it is. The real-time collaboration features, the sheer fluidity of the user interface, the way it all tightly fits together - is amazing. So, our expectations from the Kanban tool were already fairly high - especially in terms of a clutter free, fluid, “don’t-get-in-my-way” user experience.
</p>


<p>
  So, we came up with a list of criteria for deciding our tool of choice. 
</p>


<iframe width='700' height='400' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&output=html&widget=true'></iframe>


<br/>


<p>
 Here is the <a href="https://docs.google.com/spreadsheet/ccc?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&usp=sharing">original google spreadsheet</a> .
</p>


<p>So which tool did we end up choosing? Well, its a Kanban Tool called <a href="http://kanbantool.com">KanbanTool</a> :)</p>


<p>
  Lastly, I would like to mention those articles which helped us to understand Kanban better.
<ul>    
  <li><a href="http://www.agileproductdesign.com/blog/2009/kanban_over_simplified.html">Kanban Development OverSimplified</a> by Jeff Patton</li>
  <li><a href="http://www.infoq.com/presentations/Single-Piece-Flow-Kanban">Single Piece Workflow in Kanban</a> by James Shore and Arloo Banshee</li>
  <li><a href="http://www.crisp.se/gratis-material-och-guider/kanban">Kanban</a> by Henrik Kniberg</li>
</ul>
</p>


<p>
  <strong>Update:</strong> We also looked at <a href="https://trello.com">Trello</a> but it does not provide features such as WIP limit, cycle and lead time reporting etc. which are key for Kanban. But we found that there is a Google Chrome Extension which can be used for adding <a href="https://github.com/NateHark/TrelloWIPLimits">WIP(Work in Progress) limit</a> in Trello. Obviously that would not be sufficient for collaboration, but would be sufficient for personal Kanban. 
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileIndia 2013 Summary]]></title>
    <link href="http://www.multunus.com/2013/03/agileindia-2013-summary/"/>
    <updated>2013-03-08T17:07:00+05:30</updated>
    <id>http://www.multunus.com/2013/03/agileindia-2013-summary</id>
    <content type="html"><![CDATA[<p>This is the summary about the  recently concluded <a href="http://2013.agileindia.org/">Agile India Conference 2013</a>.
This gave me a chance to interact with great legends and leaders of software industry such as
Linda Rising, Mary Poppendieck, Henrik Kniberg, Jez Humble, Jeff Patton, Fred George, Craig Larman, Neil Ford, Venkat Subramaniam,
Aslam Khan, Karl Scotland, Kenji Hiranabe, Laurent Bossavit, Rebecca Parsons etc. and listen to them multiple times in the span of 4 days.  Amazing.</p>

<p>
  I am not going to write about each session I attended, am instead summarizing what I learned during those 4 days both by attending the sessions and by interacting with the speakers during those 4 days:
</p>


<ul>
    <li> Never stop learning. Experiment continuously. </li>
    <li> Experiments may fail, but learn from it and move on.</li>
  <li> Analyse why am I <i>doing</i> (whatever it is), and be innovative. If you delay innovation, it becomes worse.
  </li>
    <li>Great software can be created only with collaboration. So work as a team and share the responsibilities.</li>
    <li>Be a good coach rather being authoritative. This will help to implement changes effectively.</li>
  <li>Optimise the entire delivery process instead of just optimising the development process. Kanban helps to <i>optimise the whole</i> while Scrum helps to optimise only the development. </li>
    <li>Have tight feedback cycles by applying timeboxing mercilessly. This will help for continuous learning and improvement. Eg: 15 minutes TDD cycles which result in simple design with refactorings, Frequent Retrospectives etc.</li>
  <li>Apply Last Responsible Moment across, eg: Use practices such as <strong>Emergent Design</strong> and <strong>Evolutionary Architecture</strong> instead of doing <i>Big Design UpFront</i>. The Code complexity reports should help to identify the coding smells which helps to implement these practices.</li>
    <li>You can defer writing tests until the validation of feature is done. Adding acceptance tests for stability can deferred when you feel that it's time to have more stability</li>
</ul>


<p>
  Thanks a ton to Naresh Jain and team for organising such a wonderful event. Curious to know what's coming for Agile India 2014. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our experience with Jekyll and Octopress]]></title>
    <link href="http://www.multunus.com/2012/10/our-experience-with-jekyll-and-octopress/"/>
    <updated>2012-10-25T08:30:05+05:30</updated>
    <id>http://www.multunus.com/2012/10/our-experience-with-jekyll-and-octopress</id>
    <content type="html"><![CDATA[<div>
<p>
  We recently moved from Wordpress to Jekyll for our website because we found it harder to maintain our site with Wordpress. We also hit performance   bottlenecks with Wordpress and were clueless on how to fix those. Jekyll made a lot more sense as it uses Ruby, which we are very comfortable with as compared to PHP. And hardly any performance bottlenecks because the entire site is static, and so no DB tuning required :)
</p>

<h2>What is Jekyll?</h2>

<p>Jekyll is a simple, blog aware, static site generator created by <a href="http://tom.preston-werner.com/">Tom Preston-Werner</a>, founder of GitHub. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with any of your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your website from GitHub source.</p>
<p>We chose to use <a href="http://octopress.org/">Octopress</a>, a framework built on top of Jekyll. It comes with lot of features such as:
  <ul>
    <li>A semantic HTML5 template</li>
    <li>A Mobile first responsive layout (rotate, or resize your browser and see)</li>
    <li>Built in 3rd party support for Twitter, Google Plus One, Disqus Comments, Pinboard, Delicious, and Google Analytics</li>
    <li>An easy deployment strategy using Github pages or Rsync</li>
    <li>Built in support for Rack servers</li>
  </ul>
</p>
<p>There are lot of <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd party themes</a> available with Octopress which you can chose. This helped us to convert the existing Wordpress site to Jekyll. </p>

<h2>How does it work?</h2>

<p>Every page that you create in Jekyll will have the following sections:
  <ul>
    <li><a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML frontmatter</a> on top of every file which will contain data in the YAML format which is processed by Jekyll. The mandatory ones are “title” and “layout” which decides the title and layout of the page respectively.</li>
    <li><a href="https://github.com/Shopify/liquid">Liquid</a> markup for the templating with the in markdown format or HTML format.  There is support for <a href="https://github.com/plusjade/mustache-with-jekyll">Mustache</a> too.</li>
    <li>Layouts for the pages.</li>
    <li>Plugins - this is for customizing the content. You can see more details about how to write plugins <a href="https://github.com/mojombo/jekyll/wiki/Plugins">here</a>.</li>
  </ul>
</p>

<h2>“Aha” Moments</h2>

<p>There were many “Aha” moments throughout the migration, I am putting those top ones which came to my mind while writing.</p>

<h3>Responsiveness </h3>

Bootstrap makes it so much easier to do the regular stuff - modals, navigation bar, tooltips, etc. And with a little more effort you get responsiveness for free.

<h3>Asides for Featured posts</h3>

Asides are the way you can add sidebar to your pages in Octopress. So if you want something to be displayed on the navbar, add a new aside file and include it in your layout. We had the requirement to display certain posts as “featured” and needed to be shown them in all pages. The only thing to do was to add ‘featured: true’ in the YAML front matter of the corresponding posts and create an aside as follows and include it in your layout. 

<h3>Integrating with comments</h3>

It was as simple adding “comments: true” in the posts which you want the comments to be displayed for. 

<h3>Keeping the blogs as unpublished</h3>

Keep “published: false” in the YAML frontmatter of the post. It won’t show up in the post list.

<h3>Permanent Links for Posts</h3>

Need to change the way the URL for blogs are being displayed? Just change the permlink in _config.yml 

<h2>Where things can take time</h2>

<h3>Figuring out how Jekyll does the magic</h3>

It took a while for us to figure out how Jekyll does the “magic”. Getting a hang of the layouts, YAML Front matter, Liquid Templating, Asides in Octopress can take time. If you need to customize, writing the plugins and what type of plugin to write can also take little time initially. 
<h3>Learning curve for Sass and Twitter bootstrap</h3>


As mentioned earlier, Octopress uses <a href="http://sass-lang.com/">Sass</a> and we chose a theme which uses <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>. There would be a learning curve if you are new to both. 

<h3>Migrating content from Wordpress</h3>

There are quiet a few plugins written to <a href="https://github.com/mojombo/jekyll/wiki/Blog-Migrations">migrate</a> data from other blogging platforms including Wordpress. This worked well for blogs, but will not take care of downloading the related images and also the pages other than blogs. We used the tool <a href="https://github.com/thomasf/exitwp">exitwp</a>, which will try to migrate as much data as possible including downloading of images. But it does not take care of updating the posts with the new URL for the images, so that was a task that we had to take up manually. 

<h3>Contact Us Form</h3>

There are Wordpress plugins that can help you create a contact us form or a suggestion box. But how can you do that for a static website? You’ve two options: 

<ul>
    <li>Create an app with an API for saving the contact details</li>
    <li>Use some existing services which can persist form data</li>
</ul>

We went with the second option and after a lot of shopping around, we finally settled for none other than <a href="http://www.google.com/google-d-s/forms/">Google Forms</a>. This automatically took care of getting an email notification for every form submission. Some of the issues that we fixed or workarounds we had done are: 

<ul>
    <li>We followed the instructions mentioned <a href="http://www.morningcopy.com.au/tutorials/how-to-style-google-forms/">here</a> to customize the look and feel of the form.</li>
    <li>Added a hidden iframe to not to show the page from google form on submit</li>
    <li>Added front end validations for mandatory fields, to ensure that if and when the form is submitted, the submission would be successful.</li>
</ul>

<h3>Team Page</h3>

As any company’s website, we also needed a team page - A visual index of people and also separate pages of individual profiles. We found an excellent <a href="https://github.com/flatterline/jekyll-plugins#company-team">plugin</a>, that seemed to do just what we wanted. But since we had used Octopress, the directory structure was slightly different from what the plugin had expected. So we had to fiddle around with the plugin to understand how it worked and modify it to work for us. In the end, adding a new person to the team was as easy as adding a new yml file for that person.

<h2>Our contribution back </h2>

We’ve created couple of open source contributions as part of the migration process. You can see the details <a href="http://www.multunus.com/opensource">here</a>. 

<h2>Things, I felt, missing</h2>

<ul>
  <li>Debugging - I found it extremely tough to debug Jekyll. Tried both <a href="http://bashdb.sourceforge.net/ruby-debug.html">ruby-debug</a> and <a href="http://pryrepl.org/">pry</a>, but somehow both does not seem to be working. The tough part I found was how it suppresses exceptions. If there is an error in any generator, it just continues without even logging it.</li>

    <li>Live Editor for Octopress using which you can write the blog and automatically publish it. If you are using only Jekyll with GitHub pages, <a href="http://prose.io/">prose.io</a> would work for you.</li>
</ul>

<h2>Summary </h2>

<p>I would highly recommend Jekyll and/or Octopress for creating a company website especially if you are a software development firm comfortable with Ruby. It combines the power of Ruby, Templating and YAML using which it generates a static web site for you. Octopress helps you to quickly layout the foundation for your website on top of which you can easily build. </p>
<p>A huge thanks to the awesome Ruby community and GitHub community without whom the entire project might not have been possible. </p>

<h2>References</h2>

<a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/ ">http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/ </a>
</div>


<p><strong>Update:</strong> I've written <a href="http://www.multunus.com/2013/05/proseio_jenkins_heroku/">another post</a> about how to use Prose.io and Jenkins for Live Editing and Continuous Deployment.</p>
]]></content>
  </entry>
  
</feed>
