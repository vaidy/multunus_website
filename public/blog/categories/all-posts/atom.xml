<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: All Posts | Multunus]]></title>
  <link href="http://www.multunus.com/blog/categories/all-posts/atom.xml" rel="self"/>
  <link href="http://www.multunus.com/"/>
  <updated>2013-03-12T16:45:41+05:30</updated>
  <id>http://www.multunus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we chose our Kanban Tool]]></title>
    <link href="http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool/"/>
    <updated>2013-03-09T22:39:00+05:30</updated>
    <id>http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool</id>
    <content type="html"><![CDATA[<p>We've been using <a href="http://www.pivotaltracker.com/">Pivotal Tracker</a>[PT] as our Collaborative Project Management Tool for over 2 years now.</p>

<p>
Recently though, we chose to move toward a Kanban style of workflow. PT is however heavily geared toward an iterative form of development - but we’ve now chosen to eschew iterations altogether. We’ve been doing continuous deployment for a while now, and we found the whole process of estimations and sizing of stories a largely wasteful exercise. 
</p>


<p>
  I am not going to talk about “Why Kanban”, because there are many articles and books which talks about the same. But I am instead going to walk you through the process that we used to evaluate and decide upon the online Kanban tool that we finally ended up shifting to.
</p>


<p>
The different tools we evaluated were:
<ul>
  <li><a href="http://leankit.com/">LeanKit</a></li>
  <li><a href="http://kanbanery.com/">Kanbanery</a></li>
  <li><a href="http://kanbantool.com/">KanbanTool</a></li>
</ul>
</p>


<p>
  If you’ve ever used PT, you already know what an awesome piece of software it is. The real-time collaboration features, the sheer fluidity of the user interface, the way it all tightly fits together - is amazing. So, our expectations from the Kanban tool were already fairly high - especially in terms of a clutter free, fluid, “don’t-get-in-my-way” user experience.
</p>


<p>
  So, we came up with a list of criteria for deciding our tool of choice. 
</p>


<iframe width='700' height='400' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&output=html&widget=true'></iframe>


<br/>


<p>
 Here is the <a href="https://docs.google.com/spreadsheet/ccc?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&usp=sharing">original google spreadsheet</a> .
</p>


<p>So which tool did we end up choosing? Well, its a Kanban Tool called <a href="http://kanbantool.com">KanbanTool</a> :)</p>


<p>
  Lastly, I would like to mention those articles which helped us to understand Kanban better.
<ul>    
  <li><a href="http://www.agileproductdesign.com/blog/2009/kanban_over_simplified.html">Kanban Development OverSimplified</a> by Jeff Patton</li>
  <li><a href="http://www.infoq.com/presentations/Single-Piece-Flow-Kanban">Single Piece Workflow in Kanban</a> by James Shore and Arloo Banshee</li>
  <li><a href="http://www.crisp.se/gratis-material-och-guider/kanban">Kanban</a> by Henrik Kniberg</li>
</ul>
</p>


<p>
  <strong>Update:</strong> We also looked at <a href="https://trello.com">Trello</a> but it does not provide features such as WIP limit, cycle and lead time reporting etc. which are key for Kanban. But we found that there is a Google Chrome Extension which can be used for adding <a href="https://github.com/NateHark/TrelloWIPLimits">WIP(Work in Progress) limit</a> in Trello. Obviously that would not be sufficient for collaboration, but would be sufficient for personal Kanban. 
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileIndia 2013 Summary]]></title>
    <link href="http://www.multunus.com/2013/03/agileindia-2013-summary/"/>
    <updated>2013-03-08T17:07:00+05:30</updated>
    <id>http://www.multunus.com/2013/03/agileindia-2013-summary</id>
    <content type="html"><![CDATA[<p>This is the summary about the  recently concluded <a href="http://2013.agileindia.org/">Agile India Conference 2013</a>.
This gave me a chance to interact with great legends and leaders of software industry such as
Linda Rising, Mary Poppendieck, Henrik Kniberg, Jez Humble, Jeff Patton, Fred George, Craig Larman, Neil Ford, Venkat Subramaniam,
Aslam Khan, Karl Scotland, Kenji Hiranabe, Laurent Bossavit, Rebecca Parsons etc. and listen to them multiple times in the span of 4 days.  Amazing.</p>

<p>
  I am not going to write about each session I attended, am instead summarizing what I learned during those 4 days both by attending the sessions and by interacting with the speakers during those 4 days:
</p>


<ul>
    <li> Never stop learning. Experiment continuously. </li>
    <li> Experiments may fail, but learn from it and move on.</li>
  <li> Analyse why am I <i>doing</i> (whatever it is), and be innovative. If you delay innovation, it becomes worse.
  </li>
    <li>Great software can be created only with collaboration. So work as a team and share the responsibilities.</li>
    <li>Be a good coach rather being authoritative. This will help to implement changes effectively.</li>
  <li>Optimise the entire delivery process instead of just optimising the development process. Kanban helps to <i>optimise the whole</i> while Scrum helps to optimise only the development. </li>
    <li>Have tight feedback cycles by applying timeboxing mercilessly. This will help for continuous learning and improvement. Eg: 15 minutes TDD cycles which result in simple design with refactorings, Frequent Retrospectives etc.</li>
  <li>Apply Last Responsible Moment across, eg: Use practices such as <strong>Emergent Design</strong> and <strong>Evolutionary Architecture</strong> instead of doing <i>Big Design UpFront</i>. The Code complexity reports should help to identify the coding smells which helps to implement these practices.</li>
    <li>You can defer writing tests until the validation of feature is done. Adding acceptance tests for stability can deferred when you feel that it's time to have more stability</li>
</ul>


<p>
  Thanks a ton to Naresh Jain and team for organising such a wonderful event. Curious to know what's coming for Agile India 2014. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery of iOS apps using Jenkins and TestFlightApp ]]></title>
    <link href="http://www.multunus.com/2012/05/continuous-delivery-of-ios-apps-using-jenkins-and-testflightapp/"/>
    <updated>2012-05-21T11:03:21+05:30</updated>
    <id>http://www.multunus.com/2012/05/continuous-delivery-of-ios-apps-using-jenkins-and-testflightapp</id>
    <content type="html"><![CDATA[<p>As mentioned in <a href="http://www.multunus.com/blog/categories/continuous-delivery/">earlier posts</a> we've been doing Continuous Delivery for both Webapps and Android apps for quite sometime. This post is about setting up Continuous Delivery for iOS apps using Jenkins and <a href="http://testflightapp.com" target="_blank">TestFlightApp</a>. TestFlightApp is a free service which helps to do closed beta testing without putting into AppStore. Using their APIs, the process of delivering new versions of the app can be automated.</p>

<!-- more -->


<p>Setting up Continuous Delivery mainly involves the following steps:</p>

<ul>
    <li>Setup Mac Machine as Jenkins Node</li>
    <li>Setup Jenkins Xcode plugin</li>
    <li>Configure Distribution profile</li>
    <li>Integrate with TestFlightApp API</li>
</ul>


<p>Lets see those steps in detail.</p>

<p><strong><span style="text-decoration: underline;">Setup Mac Machine as Jenkins Node</span></strong></p>

<p>Setting up a node with Jenkins is very easy . You can either control the slave using SSH or using JWS. Each node will have a label name associated with it, which needs to be mentioned during setting up the job which needs to be run on this node. You can configure the nodes from the Manage Nodes under the Manage Jenkins option. The following screenshot shows how to configure a node using SSH.</p>

<p><img style="border: none;" src="https://s3.amazonaws.com/multunus-cdimages/jenkins_node.png" alt="Configure Node using SSH" width="579" height="411" /></p>

<p>This <a href="https://wiki.jenkins-ci.org/display/JENKINS/Step+by+step+guide+to+set+up+master+and+slave+machines">link</a> contains step by step instructions on how to configure a node using JavaWebStart.</p>

<h3><strong><span style="text-decoration: underline;">Setup Jenkins Xcode plugin</span></strong></h3>


<p>Jenkins XCode plugin abstracts the xcode commands to run for creating packages for distribution. <a href="https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin">Jenkins Wiki</a> has details about how to configure the same. I encountered one <a href="https://issues.jenkins-ci.org/browse/JENKINQS-12635?focusedCommentId=161518#comment-161518">issue</a> while configuring the same, i.e. ipa generation was failing when the "Build output directory" was configured with relative path. It got resolved by giving the full path as <strong>${WORKSPACE}/build</strong>.</p>

<h3><strong><span style="text-decoration: underline;">Configure Distribution profile</span></strong></h3>


<p>For distributing applications, an ad-hoc distribution profile needs to be created using the this <a href="https://developer.apple.com/ios/manage/provisioningprofiles/create.action?type=2">link</a>. The Development Provisioning Profile will not work with TestFlightApp. It took me sometime to figure out the same. The following video gives detailed instructions on how to create the same.</p>

<p><a href="http://www.youtube.com/watch?v=XVO0tIHmQTg&amp;feature=relmfu">http://www.youtube.com/watch?v=XVO0tIHmQTg&amp;feature=relmfu</a></p>

<h3><strong><span style="text-decoration: underline;">Integrate with TestFlightApp API</span></strong></h3>


<p>TestFlightApp provides <a href="https://testflightapp.com/api/doc/">API</a> which can be integrated with Jenkins to upload the IPA after successful build. I used curl command, as given as sample in the document, to upload the IPA. You can create support groups to be notified on each new upload of the app, and installation of the app is very simple i.e. just a click of link in the email. No iTunes and no sharing of IPA through emails.</p>

<p>One issue I was stuck during the setup was the configuration of the profile with the Xcode plugin. The plugin has the option "Embed Profile", but even if you give the path of the profile file, it was using the wrong profile for the IPA. The problem resolved when the profiles were refreshed in Xcode. You can get the Refresh option in the Organizer menu as shown below.
<img src="https://s3.amazonaws.com/multunus-cdimages/refresh_profiles_xcode.jpg" alt="Refresh profiles - Xcode" width="600" style="border: none;" /></p>

<p><strong><span style="text-decoration: underline;">Note:</span></strong> This post is mainly about integrating Jenkins with TestflightApp, hence not talking about testing tools. I am planning to cover about the same in my upcoming posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Continuous Delivery]]></title>
    <link href="http://www.multunus.com/2012/05/introduction-to-continuous-delivery/"/>
    <updated>2012-05-15T14:49:16+05:30</updated>
    <id>http://www.multunus.com/2012/05/introduction-to-continuous-delivery</id>
    <content type="html"><![CDATA[<p>We've been doing Continuous Delivery for sometime and also been writing about how to implement the same. This post is about why Continuous Delivery is required and what problems does it solve.</p>

<h3><strong><span style="text-decoration: underline;">What is Continuous Delivery</span></strong></h3>


<p>Continuous Delivery is the process of being able to continuously deliver new versions of a software product to create a tight feedback loop between users and the project team—including the customer or product owner.</p>

<!-- more -->


<p>This helps to test new ideas and changes in the product and also measure the effect of changes in the revenue. Continuous Delivery means releasing software very frequently, i.e. multiple times a day, rather than once in months.</p>

<h3><strong>Bottlenecks for Continuous Delivery</strong></h3>


<div>Lets see the usual challenges for releases. The following are the challenges that we faced before moving to Continuous Delivery. Let me put it in this way i.e. the following are the challenges which got us thinking on how to make releases more predictable and pain free. We already had a Continuous Integration setup at our end, but that was not enough to ease the process.</div>


<ul>
    <li>No tracking on which version was deployed, when and to which environment</li>
    <li>Different people working on different branches, code merge hell when its ready for deployment.</li>
    <li>When an urgent bug needs to be fixed, the fix need to be replicated in multiple branches along with the mainline branch</li>
    <li>No easy way to revert back to the previous stable version</li>
</ul>


<p>We've seen even more challenges in teams which do not have a Continuous Integration setup yet. They are:</p>

<ul>
    <li>Adhoc build processes</li>
    <li>Too much time spent on manual testing</li>
    <li>Integration of code happens only during deployment</li>
    <li>Complexity of build and deployment increases, depending on the complexity of the app.</li>
    <li>For clustered environments, the deployment needs to be updated to all slaves</li>
</ul>


<div>

Thats when we stumbled upon "<a href="http://www.informit.com/store/product.aspx?isbn=0321601912&amp;WT.DCSext.w_ptgrevartcl=Continuous+Delivery%3a+Reliable+Software+Releases+through+Build%2c+Test%2c+and+Deployment+Automation_1641923_ISBNTopCover">Continuous Delivery</a>" book by Jez Humble and Dave Farley and extended our Continuous Integration setup to Continuous Delivery.

</div>


<div>
<h3>Continuous Delivery to the rescue</h3>
One of the key principle of Continuous Delivery is <strong>To </strong><strong>create a <em>repeatable</em> and <em>reliable</em> process for releasing software.</strong> It solves problems by providing fast automated feedback on the <strong>production readiness</strong> of the application - every time there is a change to the code, infrastructure or the configuration.  So in Continuous Delivery, <strong><em>Done </em>means <em>Released.</em></strong>

</div>


<div>A central pattern of Continuous Delivery is called the <em><strong>Deployment pipeline - </strong></em>an automated implementation of the application's build, deploy, test and release process. The following shows a sample deployment pipeline:</div>


<p style="text-align: center;"><img class="aligncenter" style="border: none;" src="https://s3.amazonaws.com/multunus-cdimages/pipeline.png" alt="Deployment Pipeline" width="549" height="189" /></p>




<div>The deployment pipeline includes the following build and deployment process:</div>


<ul>
    <li>Creates executable code to verify that the syntax of the source code is valid.</li>
    <li>Runs the unit tests to check that the code behaves as expected.</li>
    <li>Runs the acceptance tests to check that the application conforms to its business acceptance criteria—that it delivers the business value that was intended.</li>
    <li>Run nonfunctional tests which checks that the application performs sufficiently well in terms of capacity, availability, security, and so on to meet its users’ needs.</li>
    <li>Runs tools which check that the expected code quality criteria such as test coverage and other technology-specific metrics are met.</li>
    <li>Then in the manual testing environment, exploratory testing is done. In parallel a demonstration to the customer and a selection of users can also be done. This helps the product owner to decide whether there are missing features, or find bugs that require fixing.</li>
    <li>If any of the above fails, the deployment should be stopped because it is a clear indication that the application is not production ready.</li>
</ul>


<div>I will write about the Benefits of Continuous Delivery in the next post.</div>


<h4><span style="text-decoration: underline;">References</span></h4>


<div><a href="https://docs.google.com/a/multunus.com/present/edit?id=0AQj1177vtu0MZHRoM2dmN180NzRneGp2bXRndw">https://docs.google.com/a/multunus.com/present/edit?id=0AQj1177vtu0MZHRoM2dmN180NzRneGp2bXRndw</a></div>


<div><a href="http://www.informit.com/articles/article.aspx?p=1829417" target="_blank">http://www.informit.com/articles/article.aspx?p=1829417</a></div>


<div><a href="http://continousdelivery.com" target="_blank">http://continousdelivery.com</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A round up of our presentations and writings]]></title>
    <link href="http://www.multunus.com/2012/02/a-round-up-of-our-presentations-and-writings/"/>
    <updated>2012-02-27T23:59:30+05:30</updated>
    <id>http://www.multunus.com/2012/02/a-round-up-of-our-presentations-and-writings</id>
    <content type="html"><![CDATA[<p>We started speaking at conferences last year. We've also been doing a fair bit of writing. This post rounds up what we've up to - along with links to our presentations and some of what we've written.</p>

<!-- more -->


<p><strong><span style="text-decoration: underline;">Presentations [in Chronological Order]</span></strong></p>

<p><strong>DevOpsDays 2011: </strong>Leena gave a lightning talk on "Push Button Deployment with Jenkins". <a href="http://sliwww.slideshare.net/leenasn/push-button-deployment-using-jenkins">Here's the presentation</a>.</p>

<p><strong>DroidCon India 2011: </strong>We gave two talks at this conference:</p>

<ul>
    <li>Leena and I co-presented on "Continuous Delivery for an Android application". Here's the <a href="http://funnel.hasgeek.com/droidcon/83-continuous-delivery-for-an-android-application">original proposal</a> and <a href="http://prezi.com/56ueprf0mkql/continuous-delivery-on-android/">here's the link to the prezi</a>. Here's a <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=uNvjNIK1EEU">short video</a> where Leena and I describe the talk.</li>
    <li>Tamil and KP gave an intro to OpenGL on Android. Here's the <a href="http://funnel.hasgeek.com/droidcon/94-introduction-to-opengl-in-android">original proposal</a> and here's the <a href="http://www.slideshare.net/tamillarasan/introduction-to-openglinandroid?from=ss_embed">link to the presentation</a>.</li>
</ul>


<p><strong>Agile India 2012</strong>: Leena and I spoke there on "Continuous Delivery for a Song". Here's the link to the <a href="http://submit2012india.agilealliance.org/node/8894">original proposal</a>. And here's the <a href="https://docs.google.com/a/multunus.com/present/view?id=0AQj1177vtu0MZHRoM2dmN180NzRneGp2bXRndw">link to the presentation</a>. It was a live demo - and by the comments we got from our audience, we think it went off fairly well.</p>

<p><img class="aligncenter size-medium" title="Agile India 2012 Talk" src="http://www.multunus.com/images/DSC_7209-300x201.jpg" alt="" width="300" height="201" /></p>

<p><strong>Recent Writing: </strong>An article I wrote for YourStory.in was published late last year. It was titled "<a href="http://yourstory.in/2011/12/a-sneak-peek-into-mobile-app-opportunities-in-2012/">Mobile App Opportunities in 2012</a>".</p>

<p><strong>Blogging:</strong> Leena has written a lot of articles on Continuous Delivery <a href="http://www.multunus.com/blog/categories/continuous-delivery/">on this blog itself</a>. And Akshay <a href="http://akshayatmultunus.wordpress.com/">has been writing regularly</a> since he joined us last year.</p>

<p>I hope you found this round up useful. I expect the Agile India organizers to upload videos of the all the talks soon. Once that happens, I'll update this post with the link to the video of our talk there.</p>
]]></content>
  </entry>
  
</feed>
