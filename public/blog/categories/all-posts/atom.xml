<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: All Posts | Multunus]]></title>
  <link href="http://www.multunus.com/blog/categories/all-posts/atom.xml" rel="self"/>
  <link href="http://www.multunus.com/"/>
  <updated>2013-04-30T10:00:37+00:00</updated>
  <id>http://www.multunus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing 2]]></title>
    <link href="http://www.multunus.com/2013/04/your-filename/"/>
    <updated>2013-04-30T13:00:00+00:00</updated>
    <id>http://www.multunus.com/2013/04/your-filename</id>
    <content type="html"><![CDATA[<h1>How does it work?</h1>

<p>Enter Text in Markdown format.</p>

<p>Testing generation with prose.io</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing 1]]></title>
    <link href="http://www.multunus.com/2013/04/testfromaws/"/>
    <updated>2013-04-29T13:00:00+00:00</updated>
    <id>http://www.multunus.com/2013/04/testfromaws</id>
    <content type="html"><![CDATA[<h1>How does it work?</h1>

<p>It should work normally</p>

<h1>testing</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimating to Timeboxing - Our Journey]]></title>
    <link href="http://www.multunus.com/2013/04/estimating-to-timeboxing-our-journey/"/>
    <updated>2013-04-11T02:33:00+00:00</updated>
    <id>http://www.multunus.com/2013/04/estimating-to-timeboxing-our-journey</id>
    <content type="html"><![CDATA[<p>Estimations are predictions. Unfortunately though, they end up being perceived as <em>commitments</em>. And the team in question starts getting unduly pressured when the estimates go wrong. At Multunus this has happened many times in the past.</p>

<p>Sometime last year we realized there was no point in trying any harder to come up with better estimates - just by relying on our past experience and gut instincts. It was time to look at things from a different perspective. </p>




<p>
We learnt a lot of things from <a href="http://www.jamesshore.com/Agile-Book/">Art of Agile Development [by James Shore]</a>. We found it tremendously useful for learning how to get started with Extreme Programming - and making the “prevention rather than cure” mental shift. This in turn resulted in much less <em>waste</em> - and higher efficiency across the team.
</p>




<p>
But we were still struggling with estimating. We tried the story points and velocity approach suggested by XP. But we were still unable to deliver things at a predictable pace.
</p>


<p>It was time to look beyond XP’s default practices. </p>




<h2>First set of changes</h2>


<br/>


<ul>
    <li>Keep both <a href="http://www.jamesshore.com/Agile-Book/release_planning.html">MMFs and Stories</a> as small as possible. </li>
    <li>Slice down all stories to the same size. This reduces the margin of error that creeps in during story size estimation. </li>
    <li>The velocity, then, is simply the number of stories delivered in an iteration.</li>
</ul>


<p>
The above changes worked well on projects which already had some kind of rhythm. We’d been working with these customer for at least 3 months - so, our knowledge of the system and the customer’s requirements were good. 
</p>


<p>
However, things still fell apart for new projects and customers. The level of uncertainty is obviously much higher in these cases - and the above modified approach was not sufficient for us to remain predictable enough.
</p>


<h2>Second set of changes</h2>


<br/>


<p>
During our search for alternative approaches [see references below], we discovered multiple presentations and blog posts - all suggesting the same thing: Estimating can never be accurate <em>enough</em>. 
</p>


<p>
We watched the <a href="http://www.infoq.com/presentations/Embracing-Uncertainty">Deliberate Discovery video [by Dan North]</a> - and that hit us. We might be more successful if we flipped things around - and <strong>timeboxed</strong> the stories and MMF’s. 
</p>


<p>
Instead of asking the question “How long will it take to build this Feature?”, we instead ask the question “What is the maximum time that should allocate for this feature?”. In addition, we’re also documenting what it is that we’re trying to discover/learn by building that particular feature. 
</p>


<p>
<strong>NOTE:</strong> This is subtly different from the “validated learning” approach in the Lean Startup world - because at this stage, we’re only speaking of engineering related risks.
</p>


<p>
This is useful to overcome <a href="http://en.wikipedia.org/wiki/Parkinson's_law">Parkinson’s Law</a> [“Work expands so as to fill the time available for its completion”]. There’s an additional sense of urgency that prevails on the team. This sense of urgency in turn results in reacting faster when we find ourselves going down “inevitable” rabbit holes. 
</p>


<p>
We’re also noticing a more ready acceptance of the “fail early” mantra - after shifting to the timeboxing mode. 

We’ve tried the timeboxing approach on two different projects - and in both cases, have found remarkably better results. We were close enough to the original estimates that we’d provided - in terms of both cost and time. 
</p>


<h2>Kanban</h2>


<br/>


<p>
As mentioned in my <a href="http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool/">earlier post</a>, we’ve moved to Kanban, so we’re no longer doing fixed weekly iterations. And hence no calculations of velocity either.
</p>


<p>
Instead the focus is on reducing the cycle time for stories - by constantly identifying and eliminating waste in the workflow. 
</p>


<p>
Of course, tracking the original project plan is still necessary - and allows for an additional level of feedback on how well the team is progressing. 
</p>


<h3>References</h3>


<p></br/>
<a href="http://neilkillick.com/2012/04/12/do-not-estimate-software-projects-at-all">http://neilkillick.com/2012/04/12/do-not-estimate-software-projects-at-all/</a></p>

<br/>


<p><a href="http://softwaredevelopmenttoday.blogspot.com.au/2012/01/story-points-considered-harmful-or-why.html">http://softwaredevelopmenttoday.blogspot.com.au/2012/01/story-points-considered-harmful-or-why.html</a></p>

<br/>


<p><a href="http://www.infoq.com/presentations/Want-Better-Estimates-Stop-Estimating">http://www.infoq.com/presentations/Want-Better-Estimates-Stop-Estimating</a></p>

<br/>


<p><a href="http://www.industriallogic.com/blog/stop-using-story-points/">http://www.industriallogic.com/blog/stop-using-story-points/</a>
<a href="http://dannorth.net/2009/07/01/the-perils-of-estimation/">http://dannorth.net/2009/07/01/the-perils-of-estimation/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we chose our Kanban Tool]]></title>
    <link href="http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool/"/>
    <updated>2013-03-09T22:39:00+00:00</updated>
    <id>http://www.multunus.com/2013/03/how-we-chose-our-kanban-tool</id>
    <content type="html"><![CDATA[<p>We've been using <a href="http://www.pivotaltracker.com/">Pivotal Tracker</a>[PT] as our Collaborative Project Management Tool for over 2 years now.</p>

<p>
Recently though, we chose to move toward a Kanban style of workflow. PT is however heavily geared toward an iterative form of development - but we’ve now chosen to eschew iterations altogether. We’ve been doing continuous deployment for a while now, and we found the whole process of estimations and sizing of stories a largely wasteful exercise. 
</p>


<p>
  I am not going to talk about “Why Kanban”, because there are many articles and books which talks about the same. But I am instead going to walk you through the process that we used to evaluate and decide upon the online Kanban tool that we finally ended up shifting to.
</p>


<p>
The different tools we evaluated were:
<ul>
  <li><a href="http://leankit.com/">LeanKit</a></li>
  <li><a href="http://kanbanery.com/">Kanbanery</a></li>
  <li><a href="http://kanbantool.com/">KanbanTool</a></li>
</ul>
</p>


<p>
  If you’ve ever used PT, you already know what an awesome piece of software it is. The real-time collaboration features, the sheer fluidity of the user interface, the way it all tightly fits together - is amazing. So, our expectations from the Kanban tool were already fairly high - especially in terms of a clutter free, fluid, “don’t-get-in-my-way” user experience.
</p>


<p>
  So, we came up with a list of criteria for deciding our tool of choice. 
</p>


<iframe width='700' height='400' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&output=html&widget=true'></iframe>


<br/>


<p>
 Here is the <a href="https://docs.google.com/spreadsheet/ccc?key=0ApUPwJdQvqT_dEJuS25YZzMwWkJVc0NXWXhIbUhaQ1E&usp=sharing">original google spreadsheet</a> .
</p>


<p>So which tool did we end up choosing? Well, its a Kanban Tool called <a href="http://kanbantool.com">KanbanTool</a> :)</p>


<p>
  Lastly, I would like to mention those articles which helped us to understand Kanban better.
<ul>    
  <li><a href="http://www.agileproductdesign.com/blog/2009/kanban_over_simplified.html">Kanban Development OverSimplified</a> by Jeff Patton</li>
  <li><a href="http://www.infoq.com/presentations/Single-Piece-Flow-Kanban">Single Piece Workflow in Kanban</a> by James Shore and Arloo Banshee</li>
  <li><a href="http://www.crisp.se/gratis-material-och-guider/kanban">Kanban</a> by Henrik Kniberg</li>
</ul>
</p>


<p>
  <strong>Update:</strong> We also looked at <a href="https://trello.com">Trello</a> but it does not provide features such as WIP limit, cycle and lead time reporting etc. which are key for Kanban. But we found that there is a Google Chrome Extension which can be used for adding <a href="https://github.com/NateHark/TrelloWIPLimits">WIP(Work in Progress) limit</a> in Trello. Obviously that would not be sufficient for collaboration, but would be sufficient for personal Kanban. 
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileIndia 2013 Summary]]></title>
    <link href="http://www.multunus.com/2013/03/agileindia-2013-summary/"/>
    <updated>2013-03-08T17:07:00+00:00</updated>
    <id>http://www.multunus.com/2013/03/agileindia-2013-summary</id>
    <content type="html"><![CDATA[<p>This is the summary about the  recently concluded <a href="http://2013.agileindia.org/">Agile India Conference 2013</a>.
This gave me a chance to interact with great legends and leaders of software industry such as
Linda Rising, Mary Poppendieck, Henrik Kniberg, Jez Humble, Jeff Patton, Fred George, Craig Larman, Neil Ford, Venkat Subramaniam,
Aslam Khan, Karl Scotland, Kenji Hiranabe, Laurent Bossavit, Rebecca Parsons etc. and listen to them multiple times in the span of 4 days.  Amazing.</p>

<p>
  I am not going to write about each session I attended, am instead summarizing what I learned during those 4 days both by attending the sessions and by interacting with the speakers during those 4 days:
</p>


<ul>
    <li> Never stop learning. Experiment continuously. </li>
    <li> Experiments may fail, but learn from it and move on.</li>
  <li> Analyse why am I <i>doing</i> (whatever it is), and be innovative. If you delay innovation, it becomes worse.
  </li>
    <li>Great software can be created only with collaboration. So work as a team and share the responsibilities.</li>
    <li>Be a good coach rather being authoritative. This will help to implement changes effectively.</li>
  <li>Optimise the entire delivery process instead of just optimising the development process. Kanban helps to <i>optimise the whole</i> while Scrum helps to optimise only the development. </li>
    <li>Have tight feedback cycles by applying timeboxing mercilessly. This will help for continuous learning and improvement. Eg: 15 minutes TDD cycles which result in simple design with refactorings, Frequent Retrospectives etc.</li>
  <li>Apply Last Responsible Moment across, eg: Use practices such as <strong>Emergent Design</strong> and <strong>Evolutionary Architecture</strong> instead of doing <i>Big Design UpFront</i>. The Code complexity reports should help to identify the coding smells which helps to implement these practices.</li>
    <li>You can defer writing tests until the validation of feature is done. Adding acceptance tests for stability can deferred when you feel that it's time to have more stability</li>
</ul>


<p>
  Thanks a ton to Naresh Jain and team for organising such a wonderful event. Curious to know what's coming for Agile India 2014. :)
</p>

]]></content>
  </entry>
  
</feed>
