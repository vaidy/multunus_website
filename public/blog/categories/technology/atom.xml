<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Multunus Software Pvt. Ltd.]]></title>
  <link href="http://www.multunus.com//blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://www.multunus.com//"/>
  <updated>2012-09-25T18:14:14+05:30</updated>
  <id>http://www.multunus.com//</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Continuous Delivery]]></title>
    <link href="http://www.multunus.com//blog/2012/05/introduction-to-continuous-delivery/"/>
    <updated>2012-05-15T14:49:16+05:30</updated>
    <id>http://www.multunus.com//blog/2012/05/introduction-to-continuous-delivery</id>
    <content type="html"><![CDATA[<p>We've been doing Continuous Delivery for sometime and also been writing about how to implement the same. This post is about why Continuous Delivery is required and what problems does it solve.</p>

<h3><strong><span style="text-decoration: underline;">What is Continuous Delivery</span></strong></h3>


<p>Continuous Delivery is the process of being able to continuously deliver new versions of a software product to create a tight feedback loop between users and the project team—including the customer or product owner.</p>

<!-- more -->


<p>This helps to test new ideas and changes in the product and also measure the effect of changes in the revenue. Continuous Delivery means releasing software very frequently, i.e. multiple times a day, rather than once in months.</p>

<h3><strong>Bottlenecks for Continuous Delivery</strong></h3>


<div>Lets see the usual challenges for releases. The following are the challenges that we faced before moving to Continuous Delivery. Let me put it in this way i.e. the following are the challenges which got us thinking on how to make releases more predictable and pain free. We already had a Continuous Integration setup at our end, but that was not enough to ease the process.</div>


<ul>
    <li>No tracking on which version was deployed, when and to which environment</li>
    <li>Different people working on different branches, code merge hell when its ready for deployment.</li>
    <li>When an urgent bug needs to be fixed, the fix need to be replicated in multiple branches along with the mainline branch</li>
    <li>No easy way to revert back to the previous stable version</li>
</ul>


<p>We've seen even more challenges in teams which do not have a Continuous Integration setup yet. They are:</p>

<ul>
    <li>Adhoc build processes</li>
    <li>Too much time spent on manual testing</li>
    <li>Integration of code happens only during deployment</li>
    <li>Complexity of build and deployment increases, depending on the complexity of the app.</li>
    <li>For clustered environments, the deployment needs to be updated to all slaves</li>
</ul>


<div>

Thats when we stumbled upon "<a href="http://www.informit.com/store/product.aspx?isbn=0321601912&amp;WT.DCSext.w_ptgrevartcl=Continuous+Delivery%3a+Reliable+Software+Releases+through+Build%2c+Test%2c+and+Deployment+Automation_1641923_ISBNTopCover">Continuous Delivery</a>" book by Jez Humble and Dave Farley and extended our Continuous Integration setup to Continuous Delivery.

</div>


<div>
<h3>Continuous Delivery to the rescue</h3>
One of the key principle of Continuous Delivery is <strong>To </strong><strong>create a <em>repeatable</em> and <em>reliable</em> process for releasing software.</strong> It solves problems by providing fast automated feedback on the <strong>production readiness</strong> of the application - every time there is a change to the code, infrastructure or the configuration.  So in Continuous Delivery, <strong><em>Done </em>means <em>Released.</em></strong>

</div>


<div>A central pattern of Continuous Delivery is called the <em><strong>Deployment pipeline - </strong></em>an automated implementation of the application's build, deploy, test and release process. The following shows a sample deployment pipeline:</div>


<p style="text-align: center;"><img class="aligncenter" style="border: none;" src="https://s3.amazonaws.com/multunus-cdimages/pipeline.png" alt="Deployment Pipeline" width="549" height="189" /></p>




<div>The deployment pipeline includes the following build and deployment process:</div>


<ul>
    <li>Creates executable code to verify that the syntax of the source code is valid.</li>
    <li>Runs the unit tests to check that the code behaves as expected.</li>
    <li>Runs the acceptance tests to check that the application conforms to its business acceptance criteria—that it delivers the business value that was intended.</li>
    <li>Run nonfunctional tests which checks that the application performs sufficiently well in terms of capacity, availability, security, and so on to meet its users’ needs.</li>
    <li>Runs tools which check that the expected code quality criteria such as test coverage and other technology-specific metrics are met.</li>
    <li>Then in the manual testing environment, exploratory testing is done. In parallel a demonstration to the customer and a selection of users can also be done. This helps the product owner to decide whether there are missing features, or find bugs that require fixing.</li>
    <li>If any of the above fails, the deployment should be stopped because it is a clear indication that the application is not production ready.</li>
</ul>


<div>I will write about the Benefits of Continuous Delivery in the next post.</div>


<h4><span style="text-decoration: underline;">References</span></h4>


<div><a href="https://docs.google.com/a/multunus.com/present/edit?id=0AQj1177vtu0MZHRoM2dmN180NzRneGp2bXRndw">https://docs.google.com/a/multunus.com/present/edit?id=0AQj1177vtu0MZHRoM2dmN180NzRneGp2bXRndw</a></div>


<div><a href="http://www.informit.com/articles/article.aspx?p=1829417" target="_blank">http://www.informit.com/articles/article.aspx?p=1829417</a></div>


<div><a href="http://continousdelivery.com" target="_blank">http://continousdelivery.com</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Image Filter using OpenGL ES in Android]]></title>
    <link href="http://www.multunus.com//blog/2011/10/simple-image-filter-using-opengl-es-in-android/"/>
    <updated>2011-10-07T15:35:45+05:30</updated>
    <id>http://www.multunus.com//blog/2011/10/simple-image-filter-using-opengl-es-in-android</id>
    <content type="html"><![CDATA[<p><em><strong>Note</strong>: This post assumes some basic knowledge in setting up an OpenGL app in Android. A basic example for rendering a texture on to a surface can be found <a href="http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/graphics/GLES20TriangleRenderer.html">here.</a> You can use this as the initial setup for trying out Shader language program listed in this post.</em></p>

<p>OpenGL is widely adopted as the graphics API of choice for real-time interactive 3D graphics applications. OpenGL is easy to understand, but its simplicity and orthogonality enable many interesting possibilities. One such possibility is image processing.</p>

<!-- more -->


<p>Using "OpenGL" for Image Processing enables us to completely utilize the power of Graphics Processing Unit (GPU) hence the image processing will be faster also it reduces the load on CPU. This can be crucial for Image processing applications, especially in mobile environment where the resources available are relatively lesser.</p>

<p>In this post we will be discussing how to use OpenGL Shader Language to manipulate pixels and create Image filter effects.</p>

<p><img class="aligncenter size-medium wp-image-1851" src="http://www.multunus.com//images/combined-300x250.png" alt="" width="300" height="250" /></p>

<p>As with any OpenGL app, we will start with setting up the view.</p>

<p>The next step is to load an image into the texture, This texture can be mapped on to the surface of a square, which will then be drawn on to the screen.For Image processing, we will require only 2 dimensions so we will set up the view in orthographic projection and will also discard z axis by keeping it to 0.0 most of the times.</p>

<p>But before drawing to the screen, there are many intermediate operations that are done by the graphics hardware, which are now directly programmable in OpenGL ES 2.0 using Shader Language (GLSL).
We will be concentrating on Vertex and Fragment processing phases in OpenGL pipeline. We will go through a simple fragment shader program and will explain how it works. Both of these programs are written in GLSL. GLSL is a ‘C’ like language which gives direct control over the  graphics pipeline without having to use assembly language or hardware-specific languages.</p>

<p><strong>Vertex shader</strong></p>

<p><code>
uniform mat4 uMVPMatrix;
attribute vec4 aPosition;
attribute vec2 aTextureCoord;
varying vec2 vTextureCoord;
void main() {
  gl_Position = uMVPMatrix * aPosition
  vTextureCoord = aTextureCoord
}
</code></p>

<p dir="ltr">The Vertex shader is executed for each vertex that is to be drawn. Here, we are drawing a square and mapping the texture on to that.</p>


<p>This calculates the transformed coordinates of the square by multiplying the given coordinates with <a href="http://en.wikibooks.org/wiki/OpenGL_Programming/3D/Matrices" target="_blank">MVPMatrix</a> [ MVP -  Model * View * Projection ]. Other than this we are also storing corresponding texture co-ordinates in variable '<em>vTextureCoords'</em> so that it is available in the fragment shader.</p>

<p><strong>Fragment Shader</strong>
<code>
precision mediump float;
varying vec2 vTextureCoord;
uniform sampler2D sTexture;
void main() {
   vec2 cen = vec2(0.5,0.5) - vTextureCoord.xy;
   vec2 mcen = -0.07*log(length(cen))*normalize(cen);
   gl_FragColor = texture2D(sTexture, vTextureCoord.xy-mcen);
}
</code></p>

<p dir="ltr"></p>


<p>Fragment shaders are executed to calculate the color of individual pixels. This is where the actual image transformation happens. Instead of mapping the corresponding texture coordinates to corresponding pixels, we can map different coordinates of the texture to different pixels which will distort the image in some way. In the above example the texture co-ordinate to fill each pixel is chosen based on the calculation in line no 6. The actual movement depends on the distance of the texture coordinate from the center. This creates an effect which is similar to what is shown in the below picture.</p>

<p>Although this is a very simple effect, the intention here is to just show potential applications of OpenGL in Android apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery for Android Apps - Part 1]]></title>
    <link href="http://www.multunus.com//blog/2011/09/continuous-delivery-for-android-apps-part-1/"/>
    <updated>2011-09-23T11:15:50+05:30</updated>
    <id>http://www.multunus.com//blog/2011/09/continuous-delivery-for-android-apps-part-1</id>
    <content type="html"><![CDATA[<div>

We've set up our CI server for building android apps. We use Jenkins as our CI server, but the same steps can be applied to any CI server.
<h3><span style="text-decoration: underline">Setup Android Environment on CI server</span></h3>
You need to first install the android SDK and platform tools on the CI server. The steps are well defined <a href="http://developer.android.com/sdk/installing.html">here</a>. You can run the command <code>android update sdk --no-ui</code> if the CI server is in an headless environment.
<h3><span style="text-decoration: underline">Generate Build script</span></h3>
Using android SDK tool , you can generate build script for the android project which contains the standard steps for building the app such as clean, compile, release, install etc. The following command will generate the build script, replace &lt;appname&gt;, &lt;target&gt; and &lt;project path&gt; accordingly.
<pre>android update project -n &lt;appname&gt; -t &lt;target&gt; -p &lt;project directory&gt;</pre>
This will create build.xml file under the project directory. You need to create build.properties file with the following contents:
<pre>key.store=path-to-keystore
key.alias=[alias]
key.store.password=[pw]
key.alias.password=[pw2]</pre>
You can generate the key file using keytoool or you can generate the key file from eclipse. Run the command  <span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;line-height: 18px">ant clean release<span style="font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;line-height: 19px">, which will compile the files, and generate the apk files (it generates signed, unsigned and unaligned files). The signed version can be used for uploading to Android Market or for installing directly on any device. Couple of stuff to be noted here are:</span></span>
<ul>
    <li>Ant version has to be 1.8.0 or higher.</li>
    <li>Put the external libraries in the <span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace;line-height: 18px">libs</span> directory. Build script automatically picks up the libraries put under libs directory, otherwise the script need to be changed to look at a different classpath.</li>
</ul>
Checkin the build.xml, build.properties and the key file into the repository.
<h3><span style="text-decoration: underline">Setup the CI server</span></h3>
The CI server has to run the ant script for building the app. One more setting what we've done in our Jenkins server was to archive the apks as artifacts (available in the post build action). In upcoming posts, I will cover how to do the following:
<ol>
    <li>Running android tests</li>
    <li>Running code/test coverage tools</li>
    <li>Actual deployment</li>
</ol>
References: <a href="http://skaug.no/ingvald/2011/09/android-app-with-jenkins/" target="_blank">http://skaug.no/ingvald/2011/09/android-app-with-jenkins/</a>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery - Part 3: Running custom rake tasks during deployment]]></title>
    <link href="http://www.multunus.com//blog/2011/07/continuous-delivery-contd/"/>
    <updated>2011-07-31T15:50:54+05:30</updated>
    <id>http://www.multunus.com//blog/2011/07/continuous-delivery-contd</id>
    <content type="html"><![CDATA[<p>One problem we faced with the pipeline setup what I had mentioned in my <a href="http://www.multunus.com//blog/2011/07/continuous-delivery-using-jenkins-build-pipeline/">first post</a> was that - it was not handling how to run the extra tasks that we need to do in some of the deployments. Some examples are:</p>

<ul>
    <li>Reindex the solr/lucene indexes if any new field has been added to the index</li>
    <li>Some custom rake tasks , say for eg: task to update values in the DB, which you don't want to add to migrations</li>
</ul>


<p>We do have Cap tasks for running the required rake tasks, but again it was done manually. So we've to remember to run them after deploying to production.  And also there is no way to track what steps were followed for a certain deployment.</p>

<p>I used the build parameter again for fixing the above issue i.e. after accepting the extra tasks as parameter for the build for the first job, they will be passed on to the downstream jobs. In this way the same deployment steps will be automatically followed for rest of the jobs in the pipeline.</p>

<p>The only difference in this case is that - sometimes the parameter can be empty. This check has to be done in the scripts i.e. if the value exists for the parameter, execute the extra tasks along with the normal deployment else just do a normal deployment.</p>

<p>Continued..</p>

<ul>
    <li><a title="Continuous Delivery – Part 1: Our Jenkins Build Pipeline setup" href="http://www.multunus.com//blog/2011/07/continuous-delivery-using-jenkins-build-pipeline/">Continuous Delivery – Part 1: Our Jenkins Build Pipeline setup</a></li>
    <li><a title="Continuous Delivery – Part 2: Code metrics with metrical" href="http://www.multunus.com//blog/2011/07/continuous-delivery-code-metrics-with-metrical/">Continuous Delivery – Part 2: Code metrics with metrical</a></li>
    <li><a title="Continuous Delivery – Part 4: Rolling back database migrations with Capistrano rollback" href="http://www.multunus.com//blog/2011/08/continuous-delivery-part-3-rolling-back-database-migrations-with-capistrano-rollback/">Continuous Delivery – Part 4: Rolling back database migrations with Capistrano rollback</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery - Part 2: Code metrics with metrical]]></title>
    <link href="http://www.multunus.com//blog/2011/07/continuous-delivery-code-metrics-with-metrical/"/>
    <updated>2011-07-31T15:44:40+05:30</updated>
    <id>http://www.multunus.com//blog/2011/07/continuous-delivery-code-metrics-with-metrical</id>
    <content type="html"><![CDATA[<p><a href="http://iain.nl/easier-metricfu-with-metrical">Metrical</a> is for easier <a href="http://metric-fu.rubyforge.org/">metric_fu</a> setup. You can see the details on why and how <a href="http://iain.nl/easier-metricfu-with-metrical">here</a>. Its an awesome tool which allows us to easily use metric_fu without adding any dependency to the project code.</p>

<p>The steps I followed for setting it up in our Jenkins server are:</p>

<ul>
    <li> Install the gem. I installed it under our ruby 1.9.2 in RVM.</li>
    <li> Create a .metrics file under your projects directory with the settings. This is not mandatory, but I had to use this because some configurations do not seem to be working with ruby 1.9.2. I've mentioned those below along with the contents of the .metrics file</li>
    <li> Create a job in Jenkins server, mention the repository details and for build step give the shell command as <em>rvm 1.9.2 -S metrical</em></li>
    <li> Configure the <a href="https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin">HTML Publisher plugin</a> for showing the nice Graphs generated by metric_fu as part of the build report. The default report location is tmp/metric_fu/output under the project directory. You can change the same in .metrics file.</li>
</ul>


<p>As I mentioned above, tools such as flay and flog, which comes as part of metric_fu, have <a href="https://github.com/iain/metrical/issues/4">issues</a> working with ruby 1.9.2. And the same case with stats graph and syntax highlighting. The same case with <a href="https://github.com/relevance/rcov/issues/8">rcov</a> also. So I had to create a <em><strong>.metrics</strong></em> file with the following contents and put in the project dir:</p>

<p><span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; line-height: 18px;"> </span></p>

<p>```
MetricFu::Configuration.run do |config|</p>

<pre><code>    config.code_dirs = ['app', 'lib']
    config.syntax_highlighting = false
    config.metrics  = [:churn,:reek,:roodi,:hotspots,:rails_best_practices]
    config.graphs   = [:reek, :roodi, :rails_best_practices]
    config.rcov[:test_files] = ['spec/**/*_spec.rb']
    config.rcov[:rcov_opts] &amp;lt;&amp;lt; &amp;quot;-Ispec&amp;quot; # Needed to find spec_helper
</code></pre>

<p>end
```</p>

<p>For test coverage I've used <a href="https://github.com/colszowka/simplecov">Simplecov</a> which is easy to setup. It will generate the coverage report whenever you run the tests. This also generated html report which can be integrated easily into Jenkins. As mentioned <a href="https://github.com/colszowka/simplecov/issues/42">here</a> in the issue list, it does not generate the report when you are running with <a href="https://github.com/timcharper/spork/wiki">spork</a>.</p>

<p>Continued..</p>

<ul>
    <li><a title="Continuous Delivery – Part 1: Our Jenkins Build Pipeline setup" href="http://www.multunus.com//blog/2011/07/continuous-delivery-using-jenkins-build-pipeline/">Continuous Delivery – Part 1: Our Jenkins Build Pipeline setup</a></li>
    <li><a title="Continuous Delivery – Part 3: Running custom rake tasks during deployment" href="http://www.multunus.com//blog/2011/07/continuous-delivery-contd/">Continuous Delivery – Part 3: Running custom rake tasks during deployment</a></li>
    <li><a title="Continuous Delivery – Part 4: Rolling back database migrations with Capistrano rollback" href="http://www.multunus.com//blog/2011/08/continuous-delivery-part-3-rolling-back-database-migrations-with-capistrano-rollback/">Continuous Delivery – Part 4: Rolling back database migrations with Capistrano rollback</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
