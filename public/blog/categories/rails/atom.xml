<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Multunus]]></title>
  <link href="http://www.multunus.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.multunus.com/"/>
  <updated>2012-12-03T19:04:08+05:30</updated>
  <id>http://www.multunus.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Productivity Enhancement Tools - MailCatcher, Vogue, SpriteCow and RailsWizard]]></title>
    <link href="http://www.multunus.com/2011/07/productivity-enhancement-tools-mailcatcher-vogue-spritecow-and-railswizard/"/>
    <updated>2011-07-31T15:03:40+05:30</updated>
    <id>http://www.multunus.com/2011/07/productivity-enhancement-tools-mailcatcher-vogue-spritecow-and-railswizard</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/sj26/mailcatcher">MailCatcher</a></h2>


<p>A super simple SMTP server which catches any messages sent to it to display in a web interface. Configure the app to deliver to smtp://127.0.0.1:1025, then check out http://127.0.0.1:1080 to see all the mails being sent out of your application.</p>

<p>This really makes it easy to check emails generated by the application in development environment. Additionally configuring this tool in your development environment makes sure that emails are not being sent to actual users unintentionally - very useful when you are trying to reproduce some issue with production environment data.</p>

<p><strong>Rating:</strong> Extremely useful</p>

<h2><a href="http://aboutcode.net/vogue/">Vogue</a></h2>


<p>Vogue creates a real-time link between your web browser and your file system. When you save a CSS file, used by the HTML page in your browser, Vogue will make the browser reload the stylesheet. Only the stylesheet is reloaded, not the entire page, making it work even for very dynamic/ajax pages.</p>

<p>A very useful tool, and it does save a lot of time when you are trying to check CSS changes across different browsers.</p>

<p>To make it work, you just have to install node.js and its package management tool - npm.</p>

<p><a href="https://github.com/joyent/node/wiki/Installation">Node installation instructions
</a><a href="http://npmjs.org/">npm installation instructions</a></p>

<p>Vogue installation [Note: This a forked repo]</p>

<p>As of this writing there is a compatibility issue with Vogue and the socket.io package it uses, so instead of installing from the official repo use this repo instead [https://github.com/DTrejo/vogue.git].<strong>
</strong></p>

<p><strong>Rating:</strong> Extremely useful</p>

<h2><a href="http://www.spritecow.com/">SpriteCow</a></h2>


<p>Helps you get the background-position, width and height of sprits within a sprite sheet.</p>

<p>This tools works really well with sprite-sheets which has a transparent background [which is usually the case].</p>

<div><strong>Rating: </strong>Useful</div>


<div><strong> </strong></div>


<p><img class="size-medium wp-image-1458 alignnone" src="http://www.multunus.com/images/sprite-cow-300x187.png" alt="" width="300" height="187" /></p>

<h2><a href="http://railswizard.org/">RailsWizard</a></h2>


<p>Rails Wizard is a tool from Intridea which makes it easy to create application templates just by specifying the gems that you want to use.  It is available as a webapp as well as as stand alone tool.</p>

<p>Because of an incompatibility with the latest mysql2 gem and rails (3.0.x) this did not work me as expected.</p>

<p><strong>Rating</strong>: Moderately useful</p>

<p><img src="http://www.multunus.com/images/rails-wizard-300x187.png" alt="" width="300" height="187" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running tests in parallel using parallel_tests]]></title>
    <link href="http://www.multunus.com/2011/06/running-tests-in-parallel-using-parallel_tests/"/>
    <updated>2011-06-27T10:48:01+05:30</updated>
    <id>http://www.multunus.com/2011/06/running-tests-in-parallel-using-parallel_tests</id>
    <content type="html"><![CDATA[<p>One of the action items I had mentioned in <a href="http://www.multunus.com/2011/06/takeaways-from-ruby-conf-india-2011/">an earlier post</a>, was to setup the  infrastructure for running tests in parallel.</p>

<p>I tried <a href="http://test-load-balancer.github.com/">TLB</a>, but stopped on it because it required cluster setup for our CI server i.e. hudson. I was looking for something which was even simpler than TLB, and tried <a href="https://github.com/ngauthier/hydra">Hydra</a>, but could not setup it successfully. Thankfully though, the Hydra committer  <a href="https://github.com/ngauthier/hydra/issues/48">suggested</a> that I try out  <a href="https://github.com/grosser/parallel_tests">parallel_tests</a> - as hydra is not currently being maintained.</p>

<p>I am yet to try running it parallelly on multiple machines, but I tried it on a dual core machine and can clearly see the difference. The following are the results:</p>

<p><strong>Without parallel_tests:</strong></p>

<pre>Finished in 451.01 seconds
1089 examples, 20 failures, 1 pending

real    8m14.908s
user    3m4.236s
sys 3m20.061s</pre>


<p><strong>With parallel_tests:</strong></p>

<pre>Results:
544 examples, 10 failures, 1 pending
545 examples, 10 failures

Took 330.528104223 seconds
Specs Failed

real    5m35.586s
user    7m3.150s
sys 0m14.269s</pre>


<p>The different is 2-3 minutes which I think is a huge deal.</p>

<p>I <a href="https://github.com/leenasn/parallel_tests">forked</a> parallel_tests to make a change to its default behaviour of running tests only under spec folder. As our app was built using rails engines, we had tests even under our vendor/engines directory.</p>

<p>The feature, I feel, missing in parallel_tests compared to TLB is the logic it uses to split the tests. TLB is intelligent enough to split the tests into different processes depending upon the time each test takes, so that all the threads finish by the same time. I am not sure whether how exactly parallel_tests works, but looks like it splits the total no of tests among the number of processes because when it started I could see the message:</p>

<pre>"2 processes for 162 specs, 81 specs per process"</pre>


<p>But parallel_tests by default spawns multiple processes depending upon the "core" i.e. on a dual core it starts 2 processes unless you mention otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript and Rails 3.0 - Quick setup]]></title>
    <link href="http://www.multunus.com/2011/06/coffeescript-and-rails-3-0-quick-setup-2/"/>
    <updated>2011-06-23T14:10:58+05:30</updated>
    <id>http://www.multunus.com/2011/06/coffeescript-and-rails-3-0-quick-setup-2</id>
    <content type="html"><![CDATA[<p>I have been hearing a lot about CoffeeScript nowadays as you must have as well. Yes, it is built into Rails 3.1 by default. However I'm still working on a Rails 3.0 project, where I'm thinking of starting to use CoffeeScript. So, this blog post concentrates on how to quickly setup CoffeeScript into your existing Rails 3.0 project. For more details refer to the links at the bottom of this post.</p>

<p><strong>Step 1:</strong> Add these to Gemfile</p>

<p><code>
gem 'therubyracer', :require =&amp;gt; false
gem 'barista'
</code></p>

<p>'barista' gem takes care of installing coffee-script gem and its dependencies. 'therubyracer' is the javascript engine for ruby.</p>

<p><strong>Step 2:</strong> Run Bundle Install to install coffee-script gem and other required gems</p>

<p><code>
bundle install
</code></p>

<p><strong>Step 3:</strong> Generate Barista initializer file config/initializers/barista_config.rb</p>

<p><code>
rails generate barista:install
</code></p>

<p><strong>Step 4(optional): </strong>Lets  configure barista to compile all coffeescript code into public/javascripts/coffeescripts/ folder (this is optional, if not configured compiled code will be placed under public/javascripts folder)</p>

<p>config/initializers/barista_config.rb, line 7.</p>

<p>```</p>

<h1>Change the output root, causing Barista to compile into public/coffeescripts</h1>

<p>c.output_root = Rails.root.join(&quot;public&quot;, &quot;javascripts&quot;, &quot;coffeescripts&quot;)
```</p>

<p><strong>Step 5:</strong> Create a folder 'coffeescripts' under app/ to have all your coffeescripts. All file names should end with .coffee
Example: app/coffeescripts/user.coffee</p>

<p><code>
jQuery -&amp;gt;
 $('form').validate()
</code></p>

<p><strong>Step 6:</strong> Above code will be complied to JS file under public/javascripts/coffeescripts/user.js. Example code:</p>

<p>```
 /<em> DO NOT MODIFY. This file was compiled Thu, 23 Jun 2011 07:13:34 GMT from
 * /home/manoj/my_rails_app/app/coffeescripts/user.coffee
 </em>/
 (function() {
  jQuery(function() {</p>

<pre><code>return $('form').validate();
</code></pre>

<p>  });
}).call(this);
```</p>

<p><strong>Step 7:</strong> Include these coffeescript js files in your view/layouts using include tag.</p>

<p><code>
&lt;%= javascript_include_tag 'application', 'coffeescripts/user'&gt;
</code></p>

<p>And you're done with setup. As the complied code is neat JS code, your page should continue to work fine :) Going forward you can start using CoffeeScript for writing JS code.</p>

<p>For deployment we can use the <code>barista:brew</code> rake task in the Capistrano script using an "after" hook</p>

<p><strong>Refrences used to create above steps:</strong>
<a href="http://jashkenas.github.com/coffee-script/">http://jashkenas.github.com/coffee-script/</a>
<a href="http://blog.nicolasblanco.fr/2010/12/13/you-should-already-use-coffeescript-in-your-rails-app/">http://blog.nicolasblanco.fr/2010/12/13/you-should-already-use-coffeescript-in-your-rails-app/</a></p>

<p><strong>Convert existing JS to coffeescript:</strong>
<a href="http://ricostacruz.com/js2coffee/">http://ricostacruz.com/js2coffee/</a></p>

<p><strong>Setting up Emacs with coffee-mode:</strong>
<a href="http://ozmm.org/posts/coffee_mode.html">http://ozmm.org/posts/coffee_mode.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways from Ruby Conf India 2011]]></title>
    <link href="http://www.multunus.com/2011/06/takeaways-from-ruby-conf-india-2011/"/>
    <updated>2011-06-14T13:58:56+05:30</updated>
    <id>http://www.multunus.com/2011/06/takeaways-from-ruby-conf-india-2011</id>
    <content type="html"><![CDATA[<p>I know its been almost two weeks since its all over, things may not be fresh in mind. And all of us were very busy with "go live" for one of our client projects. But as its "better later than never", I am putting my thoughts about the recently concluded RubyConf held in Bangalore on 28th and 29th of May 2011.</p>

<p>There were quite a few presentations this year which I felt were very useful for me. Those are:</p>

<ul>
    <li><a href="http://rubyconfindia.org/2011/presentations/brianGuthrie-RubyPlusRailsPlusAppMinusRails.key" target="_blank">Ruby Plus Rails Plus Your Application Minus Rails</a> by Brian Guthrie</li>
    <li><a href="http://rubyconfindia.org/2011/presentations/janmejay-TLB-rocketBoosterForYourBuild.pdf" target="_blank">Test Load Balancer: Rocket Booster for your Build</a> by Janmejay Singh and Pavan</li>
    <li><a href="http://rubyconfindia.org/2011/presentations/brianGuthrie-ContinuousDelivery.key" target="_blank">Continuous Delivery</a> in Ruby by Srushti Ambekallu and Brian Guthrie</li>
</ul>


<p>And its needless to say that the keynotes by Yehuda Katz, Chad Fowler, Nick Sieger and Ola Bini were awesome too. Especially<a href="http://rubyconfindia.org/2011/presentations/chadFowler-service.key" target="_blank"> Chad Fowler's session</a> gave a new perspective on "Service" and who should be considered as a "Customer". And Nick Sieger's closing note gave a different perspective on how to contribute back to the community by conducting workshops and with <a href="http://kidsruby.com/" target="_blank">Kidsruby</a>.</p>

<p>So whats next? Yes, implement the stuff we learned. So these are the immediate action items for us:</p>

<ul>
    <li>More automation for the entire release mechanism. We do have a CI server and do have a Cap script for deployment. But we do not have a "one click deployment" process. A "<a href="http://www.google.com/url?sa=D&amp;q=http://code.google.com/p/build-pipeline-plugin/">Build pipeline</a>" plugin for Hudson should help us achieve that.</li>
    <li>Tools like <a href="http://wiki.opscode.com/display/chef/Home">Chef</a>/<a href="http://www.puppetlabs.com/puppet/introduction/">Puppet</a> for server configuration management. We've tried <a href="https://github.com/wr0ngway/rubber/wiki">rubber</a>, but are yet to use it for any production setup.</li>
    <li>Use <a href="http://test-load-balancer.github.com/">TLB</a> to run tests in parallel.  Setup seem to be pretty straightforward. This will be a huge help when you are doing many deployment in a day.</li>
</ul>


<p><strong>Update: </strong>One talk I missed in the list was <a href="http://rubyconfindia.org/2011/presentations/sherinC-DesigningHighThroughputWebServiceClients.key">Designing High Throughput Web Service Clients</a> by Sherin. He was able to convey the problems he faced and how he went ahead and solved those.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disabling callbacks in Rails 3]]></title>
    <link href="http://www.multunus.com/2011/05/disabling-callbacks-in-rails-3/"/>
    <updated>2011-05-01T02:10:17+05:30</updated>
    <id>http://www.multunus.com/2011/05/disabling-callbacks-in-rails-3</id>
    <content type="html"><![CDATA[<p>It is common requirement to disable the callbacks like <code>after_save</code>, <code>after_create </code>etc while importing/migrating data. One way to avoid this is by directly importing the data into DB using a command like <code>mysqlimport</code>. But by doing that, the Rails validations etc will not work. We can disable the callbacks using the <code>skip_callback</code> method.  For eg:</p>

<p><code>User.skip_callback("create",:after,:send_confirmation_email)</code></p>

<p>The above will skip the <code>send_confirmation_email</code> callback fired on after_create.</p>

<p>To set the callback back:</p>

<p><code>User.set_callback("create",:after,:send_confirmation_email)</code></p>
]]></content>
  </entry>
  
</feed>
