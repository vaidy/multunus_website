---
comments: true
date: 2011-07-31 15:44:40
layout: post
slug: continuous-delivery-code-metrics-with-metrical
title: 'Continuous Delivery - Part 2: Code metrics with metrical'
wordpress_id: 1500
categories:
- All Posts
- Continuous Delivery
- Process
- Technology
---

[Metrical](http://iain.nl/easier-metricfu-with-metrical) is for easier [metric_fu](http://metric-fu.rubyforge.org/) setup. You can see the details on why and how [here](http://iain.nl/easier-metricfu-with-metrical). Its an awesome tool which allows us to easily use metric_fu without adding any dependency to the project code.

The steps I followed for setting it up in our Jenkins server are:



	
  * Install the gem. I installed it under our ruby 1.9.2 in RVM.

	
  * Create a .metrics file under your projects directory with the settings. This is not mandatory, but I had to use this because some configurations do not seem to be working with ruby 1.9.2. I've mentioned those below along with the contents of the .metrics file

	
  * Create a job in Jenkins server, mention the repository details and for build step give the shell command as _rvm 1.9.2 -S metrical_

	
  * Configure the [HTML Publisher plugin](https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin) for showing the nice Graphs generated by metric_fu as part of the build report. The default report location is tmp/metric_fu/output under the project directory. You can change the same in .metrics file.


As I mentioned above, tools such as flay and flog, which comes as part of metric_fu, have [issues](https://github.com/iain/metrical/issues/4) working with ruby 1.9.2. And the same case with stats graph and syntax highlighting. The same case with [rcov](https://github.com/relevance/rcov/issues/8) also. So I had to create a _**.metrics**_ file with the following contents and put in the project dir:



[sourcecode language="ruby"]
MetricFu::Configuration.run do |config|
        config.code_dirs = ['app', 'lib']
        config.syntax_highlighting = false
        config.metrics  = [:churn,:reek,:roodi,:hotspots,:rails_best_practices]
        config.graphs   = [:reek, :roodi, :rails_best_practices]
        config.rcov[:test_files] = ['spec/**/*_spec.rb']
        config.rcov[:rcov_opts] << "-Ispec" # Needed to find spec_helper
end
[/sourcecode]

For test coverage I've used [Simplecov](https://github.com/colszowka/simplecov) which is easy to setup. It will generate the coverage report whenever you run the tests. This also generated html report which can be integrated easily into Jenkins. As mentioned [here](https://github.com/colszowka/simplecov/issues/42) in the issue list, it does not generate the report when you are running with [spork](https://github.com/timcharper/spork/wiki).

Continued..



	
  * [Continuous Delivery – Part 1: Our Jenkins Build Pipeline setup](http://www.multunus.com/2011/07/continuous-delivery-using-jenkins-build-pipeline/)

	
  * [Continuous Delivery – Part 3: Running custom rake tasks during deployment](http://www.multunus.com/2011/07/continuous-delivery-contd/)

	
  * [Continuous Delivery – Part 4: Rolling back database migrations with Capistrano rollback](http://www.multunus.com/2011/08/continuous-delivery-part-3-rolling-back-database-migrations-with-capistrano-rollback/)


